1. Recursive Pattern: to print all combinations, where you can pick the each element atmost once!
  - Idea here is simple, for each element we have two options, either we pick the element or we don't

  - If we decide to pick the element, then:
      - Add the element to another data structure such as ArrayList
      - Now recusrively call the function again with index+1
  
  - If we decide not to pick the element, then:
      - Remove last element from the ArrayList (because we picked it, so if we do not want to pick it remove it first)
      - Now recursively call the function again with next index+1

BASE CASE: 
==========

    1. If we just have to print all combinations then base case would be: 
      if (index == arr.length) {
          // DO SOMETHING
          return;
      }
    
    2. If we have to print all combinations whose sum add upto to a target value then the base case would be:
      if (index == arr.length) {
        if (target == 0) {
            // DO SOMETHING
        }
        return;
      }

-------------------------------------------------------------------------------------------------------------------------------------------------------------

2. Recursive Pattern: to print any one combination
  - Idea here is simple again, for each element we two options, either we pick the element or do not pick it. But as soon as we find a comobination, or find
    a combination whose sum is equal to target then we simply return true as we found the first combination and don't need to look further.

  - We only decide to pick the element if(arr[index] <= target)
    If condition is satisfied then we habe option to pick this element. We will wrap our recursive call around an if-statement, as mentioned if the recursive 
    function return true then return true,  and thats it! NOTE: When making the recursive call the tsrget passed will be target-arr[index] as we are picking the
    element!
  
  - If we decide we cannot pick the element or the above returned false, then: 
      - Remove last element from the ArrayList (because we picked it, so if we do not want to pick it remove it first)
  
  - Now we return recursive call of the  no pick function again with next index, and same target as we are not picking so target remains same!


BASE CASE: 
==========

    if (index <= arr.length) {
        if (target == 0) {
          System.out.println("-> " + list);
          return true;
        }
        return false;
    } else if (index > arr.length)
      return false;
                                                
-------------------------------------------------------------------------------------------------------------------------------------------------------------
